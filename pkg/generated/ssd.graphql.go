// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayload includes the requested fields of the GraphQL type AddDeploymentTargetPayload.
type AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayload struct {
	NumUids          int                                                                                 `json:"numUids"`
	DeploymentTarget []*AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayloadDeploymentTarget `json:"deploymentTarget"`
}

// GetNumUids returns AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayload.NumUids, and is useful for accessing the field via an interface.
func (v *AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayload) GetNumUids() int {
	return v.NumUids
}

// GetDeploymentTarget returns AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayload.DeploymentTarget, and is useful for accessing the field via an interface.
func (v *AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayload) GetDeploymentTarget() []*AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayloadDeploymentTarget {
	return v.DeploymentTarget
}

// AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayloadDeploymentTarget includes the requested fields of the GraphQL type DeploymentTarget.
// The GraphQL type's documentation follows.
//
// DeploymentTarget describes a single place that things can be deployed into,
// such as an AWS account or a Kubernetes cluster.
type AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayloadDeploymentTarget struct {
	// id is randomly assigned
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayloadDeploymentTarget.Id, and is useful for accessing the field via an interface.
func (v *AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayloadDeploymentTarget) GetId() string {
	return v.Id
}

// GetName returns AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayloadDeploymentTarget.Name, and is useful for accessing the field via an interface.
func (v *AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayloadDeploymentTarget) GetName() string {
	return v.Name
}

type AddDeploymentTargetInput struct {
	// id is randomly assigned
	Id           string           `json:"id"`
	Name         string           `json:"name"`
	Organization *OrganizationRef `json:"organization,omitempty"`
}

// GetId returns AddDeploymentTargetInput.Id, and is useful for accessing the field via an interface.
func (v *AddDeploymentTargetInput) GetId() string { return v.Id }

// GetName returns AddDeploymentTargetInput.Name, and is useful for accessing the field via an interface.
func (v *AddDeploymentTargetInput) GetName() string { return v.Name }

// GetOrganization returns AddDeploymentTargetInput.Organization, and is useful for accessing the field via an interface.
func (v *AddDeploymentTargetInput) GetOrganization() *OrganizationRef { return v.Organization }

// AddDeploymentTargetResponse is returned by AddDeploymentTarget on success.
type AddDeploymentTargetResponse struct {
	AddDeploymentTarget *AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayload `json:"addDeploymentTarget"`
}

// GetAddDeploymentTarget returns AddDeploymentTargetResponse.AddDeploymentTarget, and is useful for accessing the field via an interface.
func (v *AddDeploymentTargetResponse) GetAddDeploymentTarget() *AddDeploymentTargetAddDeploymentTargetAddDeploymentTargetPayload {
	return v.AddDeploymentTarget
}

// AddImageAddImageAddImagePayload includes the requested fields of the GraphQL type AddImagePayload.
type AddImageAddImageAddImagePayload struct {
	Image []*AddImageAddImageAddImagePayloadImage `json:"image"`
}

// GetImage returns AddImageAddImageAddImagePayload.Image, and is useful for accessing the field via an interface.
func (v *AddImageAddImageAddImagePayload) GetImage() []*AddImageAddImageAddImagePayloadImage {
	return v.Image
}

// AddImageAddImageAddImagePayloadImage includes the requested fields of the GraphQL type Image.
// The GraphQL type's documentation follows.
//
// Image holds a specific deployable image, with a platform.  This is the underlying object
// that is scanned by security scanners.  It may also be what is deployed, but generally
// these are found indrectly through the ImageIndex, with a platform filter.
type AddImageAddImageAddImagePayloadImage struct {
	// id is a hash of the image's digest and ownership.
	Id string `json:"id"`
}

// GetId returns AddImageAddImageAddImagePayloadImage.Id, and is useful for accessing the field via an interface.
func (v *AddImageAddImageAddImagePayloadImage) GetId() string { return v.Id }

// AddImageIndexAddImageIndexAddImageIndexPayload includes the requested fields of the GraphQL type AddImageIndexPayload.
type AddImageIndexAddImageIndexAddImageIndexPayload struct {
	NumUids    int                                                         `json:"numUids"`
	ImageIndex []*AddImageIndexAddImageIndexAddImageIndexPayloadImageIndex `json:"imageIndex"`
}

// GetNumUids returns AddImageIndexAddImageIndexAddImageIndexPayload.NumUids, and is useful for accessing the field via an interface.
func (v *AddImageIndexAddImageIndexAddImageIndexPayload) GetNumUids() int { return v.NumUids }

// GetImageIndex returns AddImageIndexAddImageIndexAddImageIndexPayload.ImageIndex, and is useful for accessing the field via an interface.
func (v *AddImageIndexAddImageIndexAddImageIndexPayload) GetImageIndex() []*AddImageIndexAddImageIndexAddImageIndexPayloadImageIndex {
	return v.ImageIndex
}

// AddImageIndexAddImageIndexAddImageIndexPayloadImageIndex includes the requested fields of the GraphQL type ImageIndex.
// The GraphQL type's documentation follows.
//
// ImageIndex holds the association between an ImageName and a specific list of images,
// each of which will have a platform (hopefully) and a unique digest.
//
// ImageIndex also has a list of deployments, which indicate where this image is currently
// in use.
type AddImageIndexAddImageIndexAddImageIndexPayloadImageIndex struct {
	// id is a hash of the image index's digest and ownership.
	Id string `json:"id"`
}

// GetId returns AddImageIndexAddImageIndexAddImageIndexPayloadImageIndex.Id, and is useful for accessing the field via an interface.
func (v *AddImageIndexAddImageIndexAddImageIndexPayloadImageIndex) GetId() string { return v.Id }

type AddImageIndexInput struct {
	// id is a hash of the image index's digest and ownership.
	Id string `json:"id"`
	// Digest is the image index's digest, or the image digest if it not an index
	Digest       string           `json:"digest"`
	Organization *OrganizationRef `json:"organization,omitempty"`
	ImageNames   []*ImageNameRef  `json:"imageNames,omitempty"`
	Images       []*ImageRef      `json:"images,omitempty"`
	CreatedAt    *time.Time       `json:"createdAt"`
}

// GetId returns AddImageIndexInput.Id, and is useful for accessing the field via an interface.
func (v *AddImageIndexInput) GetId() string { return v.Id }

// GetDigest returns AddImageIndexInput.Digest, and is useful for accessing the field via an interface.
func (v *AddImageIndexInput) GetDigest() string { return v.Digest }

// GetOrganization returns AddImageIndexInput.Organization, and is useful for accessing the field via an interface.
func (v *AddImageIndexInput) GetOrganization() *OrganizationRef { return v.Organization }

// GetImageNames returns AddImageIndexInput.ImageNames, and is useful for accessing the field via an interface.
func (v *AddImageIndexInput) GetImageNames() []*ImageNameRef { return v.ImageNames }

// GetImages returns AddImageIndexInput.Images, and is useful for accessing the field via an interface.
func (v *AddImageIndexInput) GetImages() []*ImageRef { return v.Images }

// GetCreatedAt returns AddImageIndexInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddImageIndexInput) GetCreatedAt() *time.Time { return v.CreatedAt }

// AddImageIndexResponse is returned by AddImageIndex on success.
type AddImageIndexResponse struct {
	AddImageIndex *AddImageIndexAddImageIndexAddImageIndexPayload `json:"addImageIndex"`
}

// GetAddImageIndex returns AddImageIndexResponse.AddImageIndex, and is useful for accessing the field via an interface.
func (v *AddImageIndexResponse) GetAddImageIndex() *AddImageIndexAddImageIndexAddImageIndexPayload {
	return v.AddImageIndex
}

type AddImageInput struct {
	// id is a hash of the image's digest and ownership.
	Id string `json:"id"`
	// Digest is the image's digest
	Digest       string           `json:"digest"`
	Organization *OrganizationRef `json:"organization,omitempty"`
	ImageIndexes []*ImageIndexRef `json:"imageIndexes,omitempty"`
	// docker platform string, e.g. linux/arm64/v8 or linux/amd64 or linux/arm64
	Platform    string                      `json:"platform"`
	Deployments []*ApplicationDeploymentRef `json:"deployments,omitempty"`
	Scans       []*ImageScanStateRef        `json:"scans,omitempty"`
	CreatedAt   *time.Time                  `json:"createdAt"`
}

// GetId returns AddImageInput.Id, and is useful for accessing the field via an interface.
func (v *AddImageInput) GetId() string { return v.Id }

// GetDigest returns AddImageInput.Digest, and is useful for accessing the field via an interface.
func (v *AddImageInput) GetDigest() string { return v.Digest }

// GetOrganization returns AddImageInput.Organization, and is useful for accessing the field via an interface.
func (v *AddImageInput) GetOrganization() *OrganizationRef { return v.Organization }

// GetImageIndexes returns AddImageInput.ImageIndexes, and is useful for accessing the field via an interface.
func (v *AddImageInput) GetImageIndexes() []*ImageIndexRef { return v.ImageIndexes }

// GetPlatform returns AddImageInput.Platform, and is useful for accessing the field via an interface.
func (v *AddImageInput) GetPlatform() string { return v.Platform }

// GetDeployments returns AddImageInput.Deployments, and is useful for accessing the field via an interface.
func (v *AddImageInput) GetDeployments() []*ApplicationDeploymentRef { return v.Deployments }

// GetScans returns AddImageInput.Scans, and is useful for accessing the field via an interface.
func (v *AddImageInput) GetScans() []*ImageScanStateRef { return v.Scans }

// GetCreatedAt returns AddImageInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddImageInput) GetCreatedAt() *time.Time { return v.CreatedAt }

// AddImageNameAddImageNameAddImageNamePayload includes the requested fields of the GraphQL type AddImageNamePayload.
type AddImageNameAddImageNameAddImageNamePayload struct {
	NumUids   int                                                     `json:"numUids"`
	ImageName []*AddImageNameAddImageNameAddImageNamePayloadImageName `json:"imageName"`
}

// GetNumUids returns AddImageNameAddImageNameAddImageNamePayload.NumUids, and is useful for accessing the field via an interface.
func (v *AddImageNameAddImageNameAddImageNamePayload) GetNumUids() int { return v.NumUids }

// GetImageName returns AddImageNameAddImageNameAddImageNamePayload.ImageName, and is useful for accessing the field via an interface.
func (v *AddImageNameAddImageNameAddImageNamePayload) GetImageName() []*AddImageNameAddImageNameAddImageNamePayloadImageName {
	return v.ImageName
}

// AddImageNameAddImageNameAddImageNamePayloadImageName includes the requested fields of the GraphQL type ImageName.
type AddImageNameAddImageNameAddImageNamePayloadImageName struct {
	// id is the name and ownership hashed.
	Id string `json:"id"`
}

// GetId returns AddImageNameAddImageNameAddImageNamePayloadImageName.Id, and is useful for accessing the field via an interface.
func (v *AddImageNameAddImageNameAddImageNamePayloadImageName) GetId() string { return v.Id }

type AddImageNameInput struct {
	// id is the name and ownership hashed.
	Id           string           `json:"id"`
	Organization *OrganizationRef `json:"organization,omitempty"`
	// Name is the base name of the image, such as 'docker.io/library/fooimage'
	Name         string           `json:"name"`
	ImageIndexes []*ImageIndexRef `json:"imageIndexes,omitempty"`
	CreatedAt    *time.Time       `json:"createdAt"`
}

// GetId returns AddImageNameInput.Id, and is useful for accessing the field via an interface.
func (v *AddImageNameInput) GetId() string { return v.Id }

// GetOrganization returns AddImageNameInput.Organization, and is useful for accessing the field via an interface.
func (v *AddImageNameInput) GetOrganization() *OrganizationRef { return v.Organization }

// GetName returns AddImageNameInput.Name, and is useful for accessing the field via an interface.
func (v *AddImageNameInput) GetName() string { return v.Name }

// GetImageIndexes returns AddImageNameInput.ImageIndexes, and is useful for accessing the field via an interface.
func (v *AddImageNameInput) GetImageIndexes() []*ImageIndexRef { return v.ImageIndexes }

// GetCreatedAt returns AddImageNameInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddImageNameInput) GetCreatedAt() *time.Time { return v.CreatedAt }

// AddImageNameResponse is returned by AddImageName on success.
type AddImageNameResponse struct {
	AddImageName *AddImageNameAddImageNameAddImageNamePayload `json:"addImageName"`
}

// GetAddImageName returns AddImageNameResponse.AddImageName, and is useful for accessing the field via an interface.
func (v *AddImageNameResponse) GetAddImageName() *AddImageNameAddImageNameAddImageNamePayload {
	return v.AddImageName
}

// AddImageResponse is returned by AddImage on success.
type AddImageResponse struct {
	AddImage    *AddImageAddImageAddImagePayload       `json:"addImage"`
	UpdateImage *AddImageUpdateImageUpdateImagePayload `json:"updateImage"`
}

// GetAddImage returns AddImageResponse.AddImage, and is useful for accessing the field via an interface.
func (v *AddImageResponse) GetAddImage() *AddImageAddImageAddImagePayload { return v.AddImage }

// GetUpdateImage returns AddImageResponse.UpdateImage, and is useful for accessing the field via an interface.
func (v *AddImageResponse) GetUpdateImage() *AddImageUpdateImageUpdateImagePayload {
	return v.UpdateImage
}

type AddImageScanResultInput struct {
	// id is randomly assigned
	Id                string               `json:"id"`
	ImageScanState    *ImageScanStateRef   `json:"imageScanState,omitempty"`
	Components        []*ImageComponentRef `json:"components,omitempty"`
	VulnCriticalCount int                  `json:"vulnCriticalCount"`
	VulnHighCount     int                  `json:"vulnHighCount"`
	VulnMediumCount   int                  `json:"vulnMediumCount"`
	VulnLowCount      int                  `json:"vulnLowCount"`
	VulnInfoCount     int                  `json:"vulnInfoCount"`
	VulnUnknownCount  int                  `json:"vulnUnknownCount"`
	VulnNoneCount     int                  `json:"vulnNoneCount"`
	VulnTotalCount    int                  `json:"vulnTotalCount"`
	CreatedAt         *time.Time           `json:"createdAt"`
}

// GetId returns AddImageScanResultInput.Id, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetId() string { return v.Id }

// GetImageScanState returns AddImageScanResultInput.ImageScanState, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetImageScanState() *ImageScanStateRef { return v.ImageScanState }

// GetComponents returns AddImageScanResultInput.Components, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetComponents() []*ImageComponentRef { return v.Components }

// GetVulnCriticalCount returns AddImageScanResultInput.VulnCriticalCount, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetVulnCriticalCount() int { return v.VulnCriticalCount }

// GetVulnHighCount returns AddImageScanResultInput.VulnHighCount, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetVulnHighCount() int { return v.VulnHighCount }

// GetVulnMediumCount returns AddImageScanResultInput.VulnMediumCount, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetVulnMediumCount() int { return v.VulnMediumCount }

// GetVulnLowCount returns AddImageScanResultInput.VulnLowCount, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetVulnLowCount() int { return v.VulnLowCount }

// GetVulnInfoCount returns AddImageScanResultInput.VulnInfoCount, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetVulnInfoCount() int { return v.VulnInfoCount }

// GetVulnUnknownCount returns AddImageScanResultInput.VulnUnknownCount, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetVulnUnknownCount() int { return v.VulnUnknownCount }

// GetVulnNoneCount returns AddImageScanResultInput.VulnNoneCount, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetVulnNoneCount() int { return v.VulnNoneCount }

// GetVulnTotalCount returns AddImageScanResultInput.VulnTotalCount, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetVulnTotalCount() int { return v.VulnTotalCount }

// GetCreatedAt returns AddImageScanResultInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddImageScanResultInput) GetCreatedAt() *time.Time { return v.CreatedAt }

// AddImageScanStateAddImageScanStateAddImageScanStatePayload includes the requested fields of the GraphQL type AddImageScanStatePayload.
type AddImageScanStateAddImageScanStateAddImageScanStatePayload struct {
	ImageScanState []*AddImageScanStateAddImageScanStateAddImageScanStatePayloadImageScanState `json:"imageScanState"`
}

// GetImageScanState returns AddImageScanStateAddImageScanStateAddImageScanStatePayload.ImageScanState, and is useful for accessing the field via an interface.
func (v *AddImageScanStateAddImageScanStateAddImageScanStatePayload) GetImageScanState() []*AddImageScanStateAddImageScanStateAddImageScanStatePayloadImageScanState {
	return v.ImageScanState
}

// AddImageScanStateAddImageScanStateAddImageScanStatePayloadImageScanState includes the requested fields of the GraphQL type ImageScanState.
// The GraphQL type's documentation follows.
//
// ImageScanState holds the status of a scan request, which indicates that a scan is
// in progress, completed, or failed.
type AddImageScanStateAddImageScanStateAddImageScanStatePayloadImageScanState struct {
	// id is randomly assigned
	Id string `json:"id"`
}

// GetId returns AddImageScanStateAddImageScanStateAddImageScanStatePayloadImageScanState.Id, and is useful for accessing the field via an interface.
func (v *AddImageScanStateAddImageScanStateAddImageScanStatePayloadImageScanState) GetId() string {
	return v.Id
}

type AddImageScanStateInput struct {
	// id is randomly assigned
	Id               string         `json:"id"`
	Image            *ImageRef      `json:"image,omitempty"`
	Tools            []*ToolInfoRef `json:"tools,omitempty"`
	DatabaseVersions []*KeyValueRef `json:"databaseVersions,omitempty"`
	// status of the scan
	Status ImageScanStateStatus `json:"status"`
	// statusReason may hold a human-readable reason for the current state.  This is generally
	// only updated for 'error' status, where providing additional reasons for the failure
	// to a user or admin would help.
	StatusReason string              `json:"statusReason"`
	Result       *ImageScanResultRef `json:"result,omitempty"`
	UpdatedAt    *time.Time          `json:"updatedAt"`
	CreatedAt    *time.Time          `json:"createdAt"`
}

// GetId returns AddImageScanStateInput.Id, and is useful for accessing the field via an interface.
func (v *AddImageScanStateInput) GetId() string { return v.Id }

// GetImage returns AddImageScanStateInput.Image, and is useful for accessing the field via an interface.
func (v *AddImageScanStateInput) GetImage() *ImageRef { return v.Image }

// GetTools returns AddImageScanStateInput.Tools, and is useful for accessing the field via an interface.
func (v *AddImageScanStateInput) GetTools() []*ToolInfoRef { return v.Tools }

// GetDatabaseVersions returns AddImageScanStateInput.DatabaseVersions, and is useful for accessing the field via an interface.
func (v *AddImageScanStateInput) GetDatabaseVersions() []*KeyValueRef { return v.DatabaseVersions }

// GetStatus returns AddImageScanStateInput.Status, and is useful for accessing the field via an interface.
func (v *AddImageScanStateInput) GetStatus() ImageScanStateStatus { return v.Status }

// GetStatusReason returns AddImageScanStateInput.StatusReason, and is useful for accessing the field via an interface.
func (v *AddImageScanStateInput) GetStatusReason() string { return v.StatusReason }

// GetResult returns AddImageScanStateInput.Result, and is useful for accessing the field via an interface.
func (v *AddImageScanStateInput) GetResult() *ImageScanResultRef { return v.Result }

// GetUpdatedAt returns AddImageScanStateInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AddImageScanStateInput) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetCreatedAt returns AddImageScanStateInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddImageScanStateInput) GetCreatedAt() *time.Time { return v.CreatedAt }

// AddImageScanStateResponse is returned by AddImageScanState on success.
type AddImageScanStateResponse struct {
	AddImageScanState    *AddImageScanStateAddImageScanStateAddImageScanStatePayload       `json:"addImageScanState"`
	UpdateImageScanState *AddImageScanStateUpdateImageScanStateUpdateImageScanStatePayload `json:"updateImageScanState"`
}

// GetAddImageScanState returns AddImageScanStateResponse.AddImageScanState, and is useful for accessing the field via an interface.
func (v *AddImageScanStateResponse) GetAddImageScanState() *AddImageScanStateAddImageScanStateAddImageScanStatePayload {
	return v.AddImageScanState
}

// GetUpdateImageScanState returns AddImageScanStateResponse.UpdateImageScanState, and is useful for accessing the field via an interface.
func (v *AddImageScanStateResponse) GetUpdateImageScanState() *AddImageScanStateUpdateImageScanStateUpdateImageScanStatePayload {
	return v.UpdateImageScanState
}

// AddImageScanStateUpdateImageScanStateUpdateImageScanStatePayload includes the requested fields of the GraphQL type UpdateImageScanStatePayload.
type AddImageScanStateUpdateImageScanStateUpdateImageScanStatePayload struct {
	NumUids int `json:"numUids"`
}

// GetNumUids returns AddImageScanStateUpdateImageScanStateUpdateImageScanStatePayload.NumUids, and is useful for accessing the field via an interface.
func (v *AddImageScanStateUpdateImageScanStateUpdateImageScanStatePayload) GetNumUids() int {
	return v.NumUids
}

// AddImageUpdateImageUpdateImagePayload includes the requested fields of the GraphQL type UpdateImagePayload.
type AddImageUpdateImageUpdateImagePayload struct {
	NumUids int `json:"numUids"`
}

// GetNumUids returns AddImageUpdateImageUpdateImagePayload.NumUids, and is useful for accessing the field via an interface.
func (v *AddImageUpdateImageUpdateImagePayload) GetNumUids() int { return v.NumUids }

// AddOrganizationAddOrganizationAddOrganizationPayload includes the requested fields of the GraphQL type AddOrganizationPayload.
type AddOrganizationAddOrganizationAddOrganizationPayload struct {
	NumUids      int                                                                 `json:"numUids"`
	Organization []*AddOrganizationAddOrganizationAddOrganizationPayloadOrganization `json:"organization"`
}

// GetNumUids returns AddOrganizationAddOrganizationAddOrganizationPayload.NumUids, and is useful for accessing the field via an interface.
func (v *AddOrganizationAddOrganizationAddOrganizationPayload) GetNumUids() int { return v.NumUids }

// GetOrganization returns AddOrganizationAddOrganizationAddOrganizationPayload.Organization, and is useful for accessing the field via an interface.
func (v *AddOrganizationAddOrganizationAddOrganizationPayload) GetOrganization() []*AddOrganizationAddOrganizationAddOrganizationPayloadOrganization {
	return v.Organization
}

// AddOrganizationAddOrganizationAddOrganizationPayloadOrganization includes the requested fields of the GraphQL type Organization.
type AddOrganizationAddOrganizationAddOrganizationPayloadOrganization struct {
	// id is randomly assigned
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns AddOrganizationAddOrganizationAddOrganizationPayloadOrganization.Id, and is useful for accessing the field via an interface.
func (v *AddOrganizationAddOrganizationAddOrganizationPayloadOrganization) GetId() string {
	return v.Id
}

// GetName returns AddOrganizationAddOrganizationAddOrganizationPayloadOrganization.Name, and is useful for accessing the field via an interface.
func (v *AddOrganizationAddOrganizationAddOrganizationPayloadOrganization) GetName() string {
	return v.Name
}

type AddOrganizationInput struct {
	// id is randomly assigned
	Id           string                 `json:"id"`
	Name         string                 `json:"name"`
	Roles        []*RoleRef             `json:"roles,omitempty"`
	Teams        []*TeamRef             `json:"teams,omitempty"`
	Environments []*DeploymentTargetRef `json:"environments,omitempty"`
}

// GetId returns AddOrganizationInput.Id, and is useful for accessing the field via an interface.
func (v *AddOrganizationInput) GetId() string { return v.Id }

// GetName returns AddOrganizationInput.Name, and is useful for accessing the field via an interface.
func (v *AddOrganizationInput) GetName() string { return v.Name }

// GetRoles returns AddOrganizationInput.Roles, and is useful for accessing the field via an interface.
func (v *AddOrganizationInput) GetRoles() []*RoleRef { return v.Roles }

// GetTeams returns AddOrganizationInput.Teams, and is useful for accessing the field via an interface.
func (v *AddOrganizationInput) GetTeams() []*TeamRef { return v.Teams }

// GetEnvironments returns AddOrganizationInput.Environments, and is useful for accessing the field via an interface.
func (v *AddOrganizationInput) GetEnvironments() []*DeploymentTargetRef { return v.Environments }

// AddOrganizationResponse is returned by AddOrganization on success.
type AddOrganizationResponse struct {
	AddOrganization *AddOrganizationAddOrganizationAddOrganizationPayload `json:"addOrganization"`
}

// GetAddOrganization returns AddOrganizationResponse.AddOrganization, and is useful for accessing the field via an interface.
func (v *AddOrganizationResponse) GetAddOrganization() *AddOrganizationAddOrganizationAddOrganizationPayload {
	return v.AddOrganization
}

// AddScanAddImageScanResultAddImageScanResultPayload includes the requested fields of the GraphQL type AddImageScanResultPayload.
type AddScanAddImageScanResultAddImageScanResultPayload struct {
	ImageScanResult []*AddScanAddImageScanResultAddImageScanResultPayloadImageScanResult `json:"imageScanResult"`
}

// GetImageScanResult returns AddScanAddImageScanResultAddImageScanResultPayload.ImageScanResult, and is useful for accessing the field via an interface.
func (v *AddScanAddImageScanResultAddImageScanResultPayload) GetImageScanResult() []*AddScanAddImageScanResultAddImageScanResultPayloadImageScanResult {
	return v.ImageScanResult
}

// AddScanAddImageScanResultAddImageScanResultPayloadImageScanResult includes the requested fields of the GraphQL type ImageScanResult.
type AddScanAddImageScanResultAddImageScanResultPayloadImageScanResult struct {
	// id is randomly assigned
	Id string `json:"id"`
}

// GetId returns AddScanAddImageScanResultAddImageScanResultPayloadImageScanResult.Id, and is useful for accessing the field via an interface.
func (v *AddScanAddImageScanResultAddImageScanResultPayloadImageScanResult) GetId() string {
	return v.Id
}

// AddScanResponse is returned by AddScan on success.
type AddScanResponse struct {
	AddImageScanResult   *AddScanAddImageScanResultAddImageScanResultPayload     `json:"addImageScanResult"`
	UpdateImageScanState *AddScanUpdateImageScanStateUpdateImageScanStatePayload `json:"updateImageScanState"`
}

// GetAddImageScanResult returns AddScanResponse.AddImageScanResult, and is useful for accessing the field via an interface.
func (v *AddScanResponse) GetAddImageScanResult() *AddScanAddImageScanResultAddImageScanResultPayload {
	return v.AddImageScanResult
}

// GetUpdateImageScanState returns AddScanResponse.UpdateImageScanState, and is useful for accessing the field via an interface.
func (v *AddScanResponse) GetUpdateImageScanState() *AddScanUpdateImageScanStateUpdateImageScanStatePayload {
	return v.UpdateImageScanState
}

// AddScanUpdateImageScanStateUpdateImageScanStatePayload includes the requested fields of the GraphQL type UpdateImageScanStatePayload.
type AddScanUpdateImageScanStateUpdateImageScanStatePayload struct {
	NumUids int `json:"numUids"`
}

// GetNumUids returns AddScanUpdateImageScanStateUpdateImageScanStatePayload.NumUids, and is useful for accessing the field via an interface.
func (v *AddScanUpdateImageScanStateUpdateImageScanStatePayload) GetNumUids() int { return v.NumUids }

// AddTeamAddTeamAddTeamPayload includes the requested fields of the GraphQL type AddTeamPayload.
type AddTeamAddTeamAddTeamPayload struct {
	NumUids int                                 `json:"numUids"`
	Team    []*AddTeamAddTeamAddTeamPayloadTeam `json:"team"`
}

// GetNumUids returns AddTeamAddTeamAddTeamPayload.NumUids, and is useful for accessing the field via an interface.
func (v *AddTeamAddTeamAddTeamPayload) GetNumUids() int { return v.NumUids }

// GetTeam returns AddTeamAddTeamAddTeamPayload.Team, and is useful for accessing the field via an interface.
func (v *AddTeamAddTeamAddTeamPayload) GetTeam() []*AddTeamAddTeamAddTeamPayloadTeam { return v.Team }

// AddTeamAddTeamAddTeamPayloadTeam includes the requested fields of the GraphQL type Team.
type AddTeamAddTeamAddTeamPayloadTeam struct {
	// id is randomly assigned
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns AddTeamAddTeamAddTeamPayloadTeam.Id, and is useful for accessing the field via an interface.
func (v *AddTeamAddTeamAddTeamPayloadTeam) GetId() string { return v.Id }

// GetName returns AddTeamAddTeamAddTeamPayloadTeam.Name, and is useful for accessing the field via an interface.
func (v *AddTeamAddTeamAddTeamPayloadTeam) GetName() string { return v.Name }

type AddTeamInput struct {
	// id is randomly assigned
	Id           string            `json:"id"`
	Name         string            `json:"name"`
	Roles        []*RoleRef        `json:"roles,omitempty"`
	Organization *OrganizationRef  `json:"organization,omitempty"`
	Applications []*ApplicationRef `json:"applications,omitempty"`
	Labels       []*KeyValueRef    `json:"labels,omitempty"`
}

// GetId returns AddTeamInput.Id, and is useful for accessing the field via an interface.
func (v *AddTeamInput) GetId() string { return v.Id }

// GetName returns AddTeamInput.Name, and is useful for accessing the field via an interface.
func (v *AddTeamInput) GetName() string { return v.Name }

// GetRoles returns AddTeamInput.Roles, and is useful for accessing the field via an interface.
func (v *AddTeamInput) GetRoles() []*RoleRef { return v.Roles }

// GetOrganization returns AddTeamInput.Organization, and is useful for accessing the field via an interface.
func (v *AddTeamInput) GetOrganization() *OrganizationRef { return v.Organization }

// GetApplications returns AddTeamInput.Applications, and is useful for accessing the field via an interface.
func (v *AddTeamInput) GetApplications() []*ApplicationRef { return v.Applications }

// GetLabels returns AddTeamInput.Labels, and is useful for accessing the field via an interface.
func (v *AddTeamInput) GetLabels() []*KeyValueRef { return v.Labels }

// AddTeamResponse is returned by AddTeam on success.
type AddTeamResponse struct {
	AddTeam *AddTeamAddTeamAddTeamPayload `json:"addTeam"`
}

// GetAddTeam returns AddTeamResponse.AddTeam, and is useful for accessing the field via an interface.
func (v *AddTeamResponse) GetAddTeam() *AddTeamAddTeamAddTeamPayload { return v.AddTeam }

type ApplicationComponentRef struct {
	// id is randomly assigned
	Id                     string                      `json:"id"`
	Name                   string                      `json:"name"`
	ApplicationEnvironment *ApplicationEnvironmentRef  `json:"applicationEnvironment,omitempty"`
	Deployments            []*ApplicationDeploymentRef `json:"deployments,omitempty"`
}

// GetId returns ApplicationComponentRef.Id, and is useful for accessing the field via an interface.
func (v *ApplicationComponentRef) GetId() string { return v.Id }

// GetName returns ApplicationComponentRef.Name, and is useful for accessing the field via an interface.
func (v *ApplicationComponentRef) GetName() string { return v.Name }

// GetApplicationEnvironment returns ApplicationComponentRef.ApplicationEnvironment, and is useful for accessing the field via an interface.
func (v *ApplicationComponentRef) GetApplicationEnvironment() *ApplicationEnvironmentRef {
	return v.ApplicationEnvironment
}

// GetDeployments returns ApplicationComponentRef.Deployments, and is useful for accessing the field via an interface.
func (v *ApplicationComponentRef) GetDeployments() []*ApplicationDeploymentRef { return v.Deployments }

type ApplicationDeploymentRef struct {
	// id is randomly assigned
	Id              string                        `json:"id"`
	Image           []*ImageRef                   `json:"image,omitempty"`
	Component       *ApplicationComponentRef      `json:"component,omitempty"`
	DeployedAt      *time.Time                    `json:"deployedAt"`
	DeploymentStage DeploymentStage               `json:"deploymentStage"`
	Source          string                        `json:"source"`
	DeployedBy      string                        `json:"deployedBy"`
	ToolsUsed       string                        `json:"toolsUsed"`
	DeploymentRisk  *ApplicationDeploymentRiskRef `json:"deploymentRisk,omitempty"`
}

// GetId returns ApplicationDeploymentRef.Id, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetId() string { return v.Id }

// GetImage returns ApplicationDeploymentRef.Image, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetImage() []*ImageRef { return v.Image }

// GetComponent returns ApplicationDeploymentRef.Component, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetComponent() *ApplicationComponentRef { return v.Component }

// GetDeployedAt returns ApplicationDeploymentRef.DeployedAt, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetDeployedAt() *time.Time { return v.DeployedAt }

// GetDeploymentStage returns ApplicationDeploymentRef.DeploymentStage, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetDeploymentStage() DeploymentStage { return v.DeploymentStage }

// GetSource returns ApplicationDeploymentRef.Source, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetSource() string { return v.Source }

// GetDeployedBy returns ApplicationDeploymentRef.DeployedBy, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetDeployedBy() string { return v.DeployedBy }

// GetToolsUsed returns ApplicationDeploymentRef.ToolsUsed, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetToolsUsed() string { return v.ToolsUsed }

// GetDeploymentRisk returns ApplicationDeploymentRef.DeploymentRisk, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetDeploymentRisk() *ApplicationDeploymentRiskRef {
	return v.DeploymentRisk
}

type ApplicationDeploymentRiskRef struct {
	Id                    string                    `json:"id"`
	SourceCodeAlertsScore int                       `json:"sourceCodeAlertsScore"`
	BuildAlertsScore      int                       `json:"buildAlertsScore"`
	ArtifactAlertsScore   int                       `json:"artifactAlertsScore"`
	DeploymentAlertsScore int                       `json:"deploymentAlertsScore"`
	ImageRiskStatus       RiskStatus                `json:"imageRiskStatus"`
	CreatedAt             *time.Time                `json:"createdAt"`
	ApplicationDeployment *ApplicationDeploymentRef `json:"applicationDeployment,omitempty"`
}

// GetId returns ApplicationDeploymentRiskRef.Id, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetId() string { return v.Id }

// GetSourceCodeAlertsScore returns ApplicationDeploymentRiskRef.SourceCodeAlertsScore, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetSourceCodeAlertsScore() int { return v.SourceCodeAlertsScore }

// GetBuildAlertsScore returns ApplicationDeploymentRiskRef.BuildAlertsScore, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetBuildAlertsScore() int { return v.BuildAlertsScore }

// GetArtifactAlertsScore returns ApplicationDeploymentRiskRef.ArtifactAlertsScore, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetArtifactAlertsScore() int { return v.ArtifactAlertsScore }

// GetDeploymentAlertsScore returns ApplicationDeploymentRiskRef.DeploymentAlertsScore, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetDeploymentAlertsScore() int { return v.DeploymentAlertsScore }

// GetImageRiskStatus returns ApplicationDeploymentRiskRef.ImageRiskStatus, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetImageRiskStatus() RiskStatus { return v.ImageRiskStatus }

// GetCreatedAt returns ApplicationDeploymentRiskRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetApplicationDeployment returns ApplicationDeploymentRiskRef.ApplicationDeployment, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetApplicationDeployment() *ApplicationDeploymentRef {
	return v.ApplicationDeployment
}

type ApplicationEnvironmentRef struct {
	// id is randomly assigned
	Id               string                     `json:"id"`
	Type             string                     `json:"type"`
	Application      *ApplicationRef            `json:"application,omitempty"`
	DeploymentTarget *DeploymentTargetRef       `json:"deploymentTarget,omitempty"`
	Namespace        string                     `json:"namespace"`
	ToolsUsed        string                     `json:"toolsUsed"`
	Components       []*ApplicationComponentRef `json:"components,omitempty"`
	RiskStatus       *ApplicationRiskStatusRef  `json:"riskStatus,omitempty"`
}

// GetId returns ApplicationEnvironmentRef.Id, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetId() string { return v.Id }

// GetType returns ApplicationEnvironmentRef.Type, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetType() string { return v.Type }

// GetApplication returns ApplicationEnvironmentRef.Application, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetApplication() *ApplicationRef { return v.Application }

// GetDeploymentTarget returns ApplicationEnvironmentRef.DeploymentTarget, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetDeploymentTarget() *DeploymentTargetRef {
	return v.DeploymentTarget
}

// GetNamespace returns ApplicationEnvironmentRef.Namespace, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetNamespace() string { return v.Namespace }

// GetToolsUsed returns ApplicationEnvironmentRef.ToolsUsed, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetToolsUsed() string { return v.ToolsUsed }

// GetComponents returns ApplicationEnvironmentRef.Components, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetComponents() []*ApplicationComponentRef { return v.Components }

// GetRiskStatus returns ApplicationEnvironmentRef.RiskStatus, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetRiskStatus() *ApplicationRiskStatusRef { return v.RiskStatus }

type ApplicationRef struct {
	// id is randomly assigned
	Id           string                       `json:"id"`
	Name         string                       `json:"name"`
	Roles        []*RoleRef                   `json:"roles,omitempty"`
	Environments []*ApplicationEnvironmentRef `json:"environments,omitempty"`
	Team         *TeamRef                     `json:"team,omitempty"`
}

// GetId returns ApplicationRef.Id, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetId() string { return v.Id }

// GetName returns ApplicationRef.Name, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetName() string { return v.Name }

// GetRoles returns ApplicationRef.Roles, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetRoles() []*RoleRef { return v.Roles }

// GetEnvironments returns ApplicationRef.Environments, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetEnvironments() []*ApplicationEnvironmentRef { return v.Environments }

// GetTeam returns ApplicationRef.Team, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetTeam() *TeamRef { return v.Team }

type ApplicationRiskStatusRef struct {
	Id                     string                     `json:"id"`
	RiskStatus             RiskStatus                 `json:"riskStatus"`
	SourceCodeAlerts       int                        `json:"sourceCodeAlerts"`
	BuildAlerts            int                        `json:"buildAlerts"`
	ArtifactAlerts         int                        `json:"artifactAlerts"`
	DeploymentAlerts       int                        `json:"deploymentAlerts"`
	CreatedAt              *time.Time                 `json:"createdAt"`
	UpdatedAt              *time.Time                 `json:"updatedAt"`
	ApplicationEnvironment *ApplicationEnvironmentRef `json:"applicationEnvironment,omitempty"`
}

// GetId returns ApplicationRiskStatusRef.Id, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetId() string { return v.Id }

// GetRiskStatus returns ApplicationRiskStatusRef.RiskStatus, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetRiskStatus() RiskStatus { return v.RiskStatus }

// GetSourceCodeAlerts returns ApplicationRiskStatusRef.SourceCodeAlerts, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetSourceCodeAlerts() int { return v.SourceCodeAlerts }

// GetBuildAlerts returns ApplicationRiskStatusRef.BuildAlerts, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetBuildAlerts() int { return v.BuildAlerts }

// GetArtifactAlerts returns ApplicationRiskStatusRef.ArtifactAlerts, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetArtifactAlerts() int { return v.ArtifactAlerts }

// GetDeploymentAlerts returns ApplicationRiskStatusRef.DeploymentAlerts, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetDeploymentAlerts() int { return v.DeploymentAlerts }

// GetCreatedAt returns ApplicationRiskStatusRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns ApplicationRiskStatusRef.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetApplicationEnvironment returns ApplicationRiskStatusRef.ApplicationEnvironment, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetApplicationEnvironment() *ApplicationEnvironmentRef {
	return v.ApplicationEnvironment
}

type CWERef struct {
	// id is the CWE id, which is assigned from an anthority
	Id          int    `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetId returns CWERef.Id, and is useful for accessing the field via an interface.
func (v *CWERef) GetId() int { return v.Id }

// GetName returns CWERef.Name, and is useful for accessing the field via an interface.
func (v *CWERef) GetName() string { return v.Name }

// GetDescription returns CWERef.Description, and is useful for accessing the field via an interface.
func (v *CWERef) GetDescription() string { return v.Description }

type DeploymentStage string

const (
	DeploymentStageDiscovered DeploymentStage = "discovered"
	DeploymentStageCurrent    DeploymentStage = "current"
	DeploymentStagePrevious   DeploymentStage = "previous"
	DeploymentStageBlocked    DeploymentStage = "blocked"
)

type DeploymentTargetRef struct {
	// id is randomly assigned
	Id           string           `json:"id"`
	Name         string           `json:"name"`
	Organization *OrganizationRef `json:"organization,omitempty"`
}

// GetId returns DeploymentTargetRef.Id, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetId() string { return v.Id }

// GetName returns DeploymentTargetRef.Name, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetName() string { return v.Name }

// GetOrganization returns DeploymentTargetRef.Organization, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetOrganization() *OrganizationRef { return v.Organization }

// GetImageIndexAndImagesGetImageIndex includes the requested fields of the GraphQL type ImageIndex.
// The GraphQL type's documentation follows.
//
// ImageIndex holds the association between an ImageName and a specific list of images,
// each of which will have a platform (hopefully) and a unique digest.
//
// ImageIndex also has a list of deployments, which indicate where this image is currently
// in use.
type GetImageIndexAndImagesGetImageIndex struct {
	// Images which are part of this index
	Images []*GetImageIndexAndImagesGetImageIndexImagesImage `json:"images"`
}

// GetImages returns GetImageIndexAndImagesGetImageIndex.Images, and is useful for accessing the field via an interface.
func (v *GetImageIndexAndImagesGetImageIndex) GetImages() []*GetImageIndexAndImagesGetImageIndexImagesImage {
	return v.Images
}

// GetImageIndexAndImagesGetImageIndexImagesImage includes the requested fields of the GraphQL type Image.
// The GraphQL type's documentation follows.
//
// Image holds a specific deployable image, with a platform.  This is the underlying object
// that is scanned by security scanners.  It may also be what is deployed, but generally
// these are found indrectly through the ImageIndex, with a platform filter.
type GetImageIndexAndImagesGetImageIndexImagesImage struct {
	// Digest is the image's digest
	Digest string `json:"digest"`
	// docker platform string, e.g. linux/arm64/v8 or linux/amd64 or linux/arm64
	Platform string `json:"platform"`
}

// GetDigest returns GetImageIndexAndImagesGetImageIndexImagesImage.Digest, and is useful for accessing the field via an interface.
func (v *GetImageIndexAndImagesGetImageIndexImagesImage) GetDigest() string { return v.Digest }

// GetPlatform returns GetImageIndexAndImagesGetImageIndexImagesImage.Platform, and is useful for accessing the field via an interface.
func (v *GetImageIndexAndImagesGetImageIndexImagesImage) GetPlatform() string { return v.Platform }

// GetImageIndexAndImagesResponse is returned by GetImageIndexAndImages on success.
type GetImageIndexAndImagesResponse struct {
	GetImageIndex *GetImageIndexAndImagesGetImageIndex `json:"getImageIndex"`
}

// GetGetImageIndex returns GetImageIndexAndImagesResponse.GetImageIndex, and is useful for accessing the field via an interface.
func (v *GetImageIndexAndImagesResponse) GetGetImageIndex() *GetImageIndexAndImagesGetImageIndex {
	return v.GetImageIndex
}

// GetOrganizationGetOrganization includes the requested fields of the GraphQL type Organization.
type GetOrganizationGetOrganization struct {
	// id is randomly assigned
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns GetOrganizationGetOrganization.Id, and is useful for accessing the field via an interface.
func (v *GetOrganizationGetOrganization) GetId() string { return v.Id }

// GetName returns GetOrganizationGetOrganization.Name, and is useful for accessing the field via an interface.
func (v *GetOrganizationGetOrganization) GetName() string { return v.Name }

// GetOrganizationResponse is returned by GetOrganization on success.
type GetOrganizationResponse struct {
	GetOrganization *GetOrganizationGetOrganization `json:"getOrganization"`
}

// GetGetOrganization returns GetOrganizationResponse.GetOrganization, and is useful for accessing the field via an interface.
func (v *GetOrganizationResponse) GetGetOrganization() *GetOrganizationGetOrganization {
	return v.GetOrganization
}

type ImageComponentRef struct {
	// id is randomly assigned
	Id              string              `json:"id"`
	Type            string              `json:"type"`
	Name            string              `json:"name"`
	Version         string              `json:"version"`
	Licenses        []string            `json:"licenses"`
	Purl            string              `json:"purl"`
	Cpe             string              `json:"cpe"`
	Vulnerabilities []*VulnerabilityRef `json:"vulnerabilities,omitempty"`
	ImageScanResult *ImageScanResultRef `json:"imageScanResult,omitempty"`
}

// GetId returns ImageComponentRef.Id, and is useful for accessing the field via an interface.
func (v *ImageComponentRef) GetId() string { return v.Id }

// GetType returns ImageComponentRef.Type, and is useful for accessing the field via an interface.
func (v *ImageComponentRef) GetType() string { return v.Type }

// GetName returns ImageComponentRef.Name, and is useful for accessing the field via an interface.
func (v *ImageComponentRef) GetName() string { return v.Name }

// GetVersion returns ImageComponentRef.Version, and is useful for accessing the field via an interface.
func (v *ImageComponentRef) GetVersion() string { return v.Version }

// GetLicenses returns ImageComponentRef.Licenses, and is useful for accessing the field via an interface.
func (v *ImageComponentRef) GetLicenses() []string { return v.Licenses }

// GetPurl returns ImageComponentRef.Purl, and is useful for accessing the field via an interface.
func (v *ImageComponentRef) GetPurl() string { return v.Purl }

// GetCpe returns ImageComponentRef.Cpe, and is useful for accessing the field via an interface.
func (v *ImageComponentRef) GetCpe() string { return v.Cpe }

// GetVulnerabilities returns ImageComponentRef.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *ImageComponentRef) GetVulnerabilities() []*VulnerabilityRef { return v.Vulnerabilities }

// GetImageScanResult returns ImageComponentRef.ImageScanResult, and is useful for accessing the field via an interface.
func (v *ImageComponentRef) GetImageScanResult() *ImageScanResultRef { return v.ImageScanResult }

type ImageIndexRef struct {
	// id is a hash of the image index's digest and ownership.
	Id string `json:"id"`
	// Digest is the image index's digest, or the image digest if it not an index
	Digest       string           `json:"digest"`
	Organization *OrganizationRef `json:"organization,omitempty"`
	ImageNames   []*ImageNameRef  `json:"imageNames,omitempty"`
	Images       []*ImageRef      `json:"images,omitempty"`
	CreatedAt    *time.Time       `json:"createdAt"`
}

// GetId returns ImageIndexRef.Id, and is useful for accessing the field via an interface.
func (v *ImageIndexRef) GetId() string { return v.Id }

// GetDigest returns ImageIndexRef.Digest, and is useful for accessing the field via an interface.
func (v *ImageIndexRef) GetDigest() string { return v.Digest }

// GetOrganization returns ImageIndexRef.Organization, and is useful for accessing the field via an interface.
func (v *ImageIndexRef) GetOrganization() *OrganizationRef { return v.Organization }

// GetImageNames returns ImageIndexRef.ImageNames, and is useful for accessing the field via an interface.
func (v *ImageIndexRef) GetImageNames() []*ImageNameRef { return v.ImageNames }

// GetImages returns ImageIndexRef.Images, and is useful for accessing the field via an interface.
func (v *ImageIndexRef) GetImages() []*ImageRef { return v.Images }

// GetCreatedAt returns ImageIndexRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *ImageIndexRef) GetCreatedAt() *time.Time { return v.CreatedAt }

type ImageNameRef struct {
	// id is the name and ownership hashed.
	Id           string           `json:"id"`
	Organization *OrganizationRef `json:"organization,omitempty"`
	// Name is the base name of the image, such as 'docker.io/library/fooimage'
	Name         string           `json:"name"`
	ImageIndexes []*ImageIndexRef `json:"imageIndexes,omitempty"`
	CreatedAt    *time.Time       `json:"createdAt"`
}

// GetId returns ImageNameRef.Id, and is useful for accessing the field via an interface.
func (v *ImageNameRef) GetId() string { return v.Id }

// GetOrganization returns ImageNameRef.Organization, and is useful for accessing the field via an interface.
func (v *ImageNameRef) GetOrganization() *OrganizationRef { return v.Organization }

// GetName returns ImageNameRef.Name, and is useful for accessing the field via an interface.
func (v *ImageNameRef) GetName() string { return v.Name }

// GetImageIndexes returns ImageNameRef.ImageIndexes, and is useful for accessing the field via an interface.
func (v *ImageNameRef) GetImageIndexes() []*ImageIndexRef { return v.ImageIndexes }

// GetCreatedAt returns ImageNameRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *ImageNameRef) GetCreatedAt() *time.Time { return v.CreatedAt }

type ImageRef struct {
	// id is a hash of the image's digest and ownership.
	Id string `json:"id"`
	// Digest is the image's digest
	Digest       string           `json:"digest"`
	Organization *OrganizationRef `json:"organization,omitempty"`
	ImageIndexes []*ImageIndexRef `json:"imageIndexes,omitempty"`
	// docker platform string, e.g. linux/arm64/v8 or linux/amd64 or linux/arm64
	Platform    string                      `json:"platform"`
	Deployments []*ApplicationDeploymentRef `json:"deployments,omitempty"`
	Scans       []*ImageScanStateRef        `json:"scans,omitempty"`
	CreatedAt   *time.Time                  `json:"createdAt"`
}

// GetId returns ImageRef.Id, and is useful for accessing the field via an interface.
func (v *ImageRef) GetId() string { return v.Id }

// GetDigest returns ImageRef.Digest, and is useful for accessing the field via an interface.
func (v *ImageRef) GetDigest() string { return v.Digest }

// GetOrganization returns ImageRef.Organization, and is useful for accessing the field via an interface.
func (v *ImageRef) GetOrganization() *OrganizationRef { return v.Organization }

// GetImageIndexes returns ImageRef.ImageIndexes, and is useful for accessing the field via an interface.
func (v *ImageRef) GetImageIndexes() []*ImageIndexRef { return v.ImageIndexes }

// GetPlatform returns ImageRef.Platform, and is useful for accessing the field via an interface.
func (v *ImageRef) GetPlatform() string { return v.Platform }

// GetDeployments returns ImageRef.Deployments, and is useful for accessing the field via an interface.
func (v *ImageRef) GetDeployments() []*ApplicationDeploymentRef { return v.Deployments }

// GetScans returns ImageRef.Scans, and is useful for accessing the field via an interface.
func (v *ImageRef) GetScans() []*ImageScanStateRef { return v.Scans }

// GetCreatedAt returns ImageRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *ImageRef) GetCreatedAt() *time.Time { return v.CreatedAt }

type ImageScanResultRef struct {
	// id is randomly assigned
	Id                string               `json:"id"`
	ImageScanState    *ImageScanStateRef   `json:"imageScanState,omitempty"`
	Components        []*ImageComponentRef `json:"components,omitempty"`
	VulnCriticalCount int                  `json:"vulnCriticalCount"`
	VulnHighCount     int                  `json:"vulnHighCount"`
	VulnMediumCount   int                  `json:"vulnMediumCount"`
	VulnLowCount      int                  `json:"vulnLowCount"`
	VulnInfoCount     int                  `json:"vulnInfoCount"`
	VulnUnknownCount  int                  `json:"vulnUnknownCount"`
	VulnNoneCount     int                  `json:"vulnNoneCount"`
	VulnTotalCount    int                  `json:"vulnTotalCount"`
	CreatedAt         *time.Time           `json:"createdAt"`
}

// GetId returns ImageScanResultRef.Id, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetId() string { return v.Id }

// GetImageScanState returns ImageScanResultRef.ImageScanState, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetImageScanState() *ImageScanStateRef { return v.ImageScanState }

// GetComponents returns ImageScanResultRef.Components, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetComponents() []*ImageComponentRef { return v.Components }

// GetVulnCriticalCount returns ImageScanResultRef.VulnCriticalCount, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetVulnCriticalCount() int { return v.VulnCriticalCount }

// GetVulnHighCount returns ImageScanResultRef.VulnHighCount, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetVulnHighCount() int { return v.VulnHighCount }

// GetVulnMediumCount returns ImageScanResultRef.VulnMediumCount, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetVulnMediumCount() int { return v.VulnMediumCount }

// GetVulnLowCount returns ImageScanResultRef.VulnLowCount, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetVulnLowCount() int { return v.VulnLowCount }

// GetVulnInfoCount returns ImageScanResultRef.VulnInfoCount, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetVulnInfoCount() int { return v.VulnInfoCount }

// GetVulnUnknownCount returns ImageScanResultRef.VulnUnknownCount, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetVulnUnknownCount() int { return v.VulnUnknownCount }

// GetVulnNoneCount returns ImageScanResultRef.VulnNoneCount, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetVulnNoneCount() int { return v.VulnNoneCount }

// GetVulnTotalCount returns ImageScanResultRef.VulnTotalCount, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetVulnTotalCount() int { return v.VulnTotalCount }

// GetCreatedAt returns ImageScanResultRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *ImageScanResultRef) GetCreatedAt() *time.Time { return v.CreatedAt }

type ImageScanStatePatch struct {
	Image            *ImageRef      `json:"image,omitempty"`
	Tools            []*ToolInfoRef `json:"tools,omitempty"`
	DatabaseVersions []*KeyValueRef `json:"databaseVersions,omitempty"`
	// status of the scan
	Status ImageScanStateStatus `json:"status"`
	// statusReason may hold a human-readable reason for the current state.  This is generally
	// only updated for 'error' status, where providing additional reasons for the failure
	// to a user or admin would help.
	StatusReason string              `json:"statusReason"`
	Result       *ImageScanResultRef `json:"result,omitempty"`
	UpdatedAt    *time.Time          `json:"updatedAt"`
	CreatedAt    *time.Time          `json:"createdAt"`
}

// GetImage returns ImageScanStatePatch.Image, and is useful for accessing the field via an interface.
func (v *ImageScanStatePatch) GetImage() *ImageRef { return v.Image }

// GetTools returns ImageScanStatePatch.Tools, and is useful for accessing the field via an interface.
func (v *ImageScanStatePatch) GetTools() []*ToolInfoRef { return v.Tools }

// GetDatabaseVersions returns ImageScanStatePatch.DatabaseVersions, and is useful for accessing the field via an interface.
func (v *ImageScanStatePatch) GetDatabaseVersions() []*KeyValueRef { return v.DatabaseVersions }

// GetStatus returns ImageScanStatePatch.Status, and is useful for accessing the field via an interface.
func (v *ImageScanStatePatch) GetStatus() ImageScanStateStatus { return v.Status }

// GetStatusReason returns ImageScanStatePatch.StatusReason, and is useful for accessing the field via an interface.
func (v *ImageScanStatePatch) GetStatusReason() string { return v.StatusReason }

// GetResult returns ImageScanStatePatch.Result, and is useful for accessing the field via an interface.
func (v *ImageScanStatePatch) GetResult() *ImageScanResultRef { return v.Result }

// GetUpdatedAt returns ImageScanStatePatch.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ImageScanStatePatch) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetCreatedAt returns ImageScanStatePatch.CreatedAt, and is useful for accessing the field via an interface.
func (v *ImageScanStatePatch) GetCreatedAt() *time.Time { return v.CreatedAt }

type ImageScanStateRef struct {
	// id is randomly assigned
	Id               string         `json:"id"`
	Image            *ImageRef      `json:"image,omitempty"`
	Tools            []*ToolInfoRef `json:"tools,omitempty"`
	DatabaseVersions []*KeyValueRef `json:"databaseVersions,omitempty"`
	// status of the scan
	Status ImageScanStateStatus `json:"status"`
	// statusReason may hold a human-readable reason for the current state.  This is generally
	// only updated for 'error' status, where providing additional reasons for the failure
	// to a user or admin would help.
	StatusReason string              `json:"statusReason"`
	Result       *ImageScanResultRef `json:"result,omitempty"`
	UpdatedAt    *time.Time          `json:"updatedAt"`
	CreatedAt    *time.Time          `json:"createdAt"`
}

// GetId returns ImageScanStateRef.Id, and is useful for accessing the field via an interface.
func (v *ImageScanStateRef) GetId() string { return v.Id }

// GetImage returns ImageScanStateRef.Image, and is useful for accessing the field via an interface.
func (v *ImageScanStateRef) GetImage() *ImageRef { return v.Image }

// GetTools returns ImageScanStateRef.Tools, and is useful for accessing the field via an interface.
func (v *ImageScanStateRef) GetTools() []*ToolInfoRef { return v.Tools }

// GetDatabaseVersions returns ImageScanStateRef.DatabaseVersions, and is useful for accessing the field via an interface.
func (v *ImageScanStateRef) GetDatabaseVersions() []*KeyValueRef { return v.DatabaseVersions }

// GetStatus returns ImageScanStateRef.Status, and is useful for accessing the field via an interface.
func (v *ImageScanStateRef) GetStatus() ImageScanStateStatus { return v.Status }

// GetStatusReason returns ImageScanStateRef.StatusReason, and is useful for accessing the field via an interface.
func (v *ImageScanStateRef) GetStatusReason() string { return v.StatusReason }

// GetResult returns ImageScanStateRef.Result, and is useful for accessing the field via an interface.
func (v *ImageScanStateRef) GetResult() *ImageScanResultRef { return v.Result }

// GetUpdatedAt returns ImageScanStateRef.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ImageScanStateRef) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetCreatedAt returns ImageScanStateRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *ImageScanStateRef) GetCreatedAt() *time.Time { return v.CreatedAt }

type ImageScanStateStatus string

const (
	// The image scan has been started, but is not yet complete
	ImageScanStateStatusPending ImageScanStateStatus = "pending"
	// The image scan is currently in progress
	ImageScanStateStatusRunning ImageScanStateStatus = "running"
	// the image scan is complete and results are available
	ImageScanStateStatusComplete ImageScanStateStatus = "complete"
	// the image scan failed for some reason, and no further work will be performed on this scan
	ImageScanStateStatusError ImageScanStateStatus = "error"
)

type KeyValueRef struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns KeyValueRef.Name, and is useful for accessing the field via an interface.
func (v *KeyValueRef) GetName() string { return v.Name }

// GetValue returns KeyValueRef.Value, and is useful for accessing the field via an interface.
func (v *KeyValueRef) GetValue() string { return v.Value }

// LinkImageIndexToNameResponse is returned by LinkImageIndexToName on success.
type LinkImageIndexToNameResponse struct {
	UpdateImageName *LinkImageIndexToNameUpdateImageNameUpdateImageNamePayload `json:"updateImageName"`
}

// GetUpdateImageName returns LinkImageIndexToNameResponse.UpdateImageName, and is useful for accessing the field via an interface.
func (v *LinkImageIndexToNameResponse) GetUpdateImageName() *LinkImageIndexToNameUpdateImageNameUpdateImageNamePayload {
	return v.UpdateImageName
}

// LinkImageIndexToNameUpdateImageNameUpdateImageNamePayload includes the requested fields of the GraphQL type UpdateImageNamePayload.
type LinkImageIndexToNameUpdateImageNameUpdateImageNamePayload struct {
	NumUids int `json:"numUids"`
}

// GetNumUids returns LinkImageIndexToNameUpdateImageNameUpdateImageNamePayload.NumUids, and is useful for accessing the field via an interface.
func (v *LinkImageIndexToNameUpdateImageNameUpdateImageNamePayload) GetNumUids() int {
	return v.NumUids
}

type OrganizationRef struct {
	// id is randomly assigned
	Id           string                 `json:"id"`
	Name         string                 `json:"name"`
	Roles        []*RoleRef             `json:"roles,omitempty"`
	Teams        []*TeamRef             `json:"teams,omitempty"`
	Environments []*DeploymentTargetRef `json:"environments,omitempty"`
}

// GetId returns OrganizationRef.Id, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetId() string { return v.Id }

// GetName returns OrganizationRef.Name, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetName() string { return v.Name }

// GetRoles returns OrganizationRef.Roles, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetRoles() []*RoleRef { return v.Roles }

// GetTeams returns OrganizationRef.Teams, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetTeams() []*TeamRef { return v.Teams }

// GetEnvironments returns OrganizationRef.Environments, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetEnvironments() []*DeploymentTargetRef { return v.Environments }

type RiskStatus string

const (
	RiskStatusLowrisk        RiskStatus = "lowrisk"
	RiskStatusMediumrisk     RiskStatus = "mediumrisk"
	RiskStatusHighrisk       RiskStatus = "highrisk"
	RiskStatusApocalypserisk RiskStatus = "apocalypserisk"
	RiskStatusInprogress     RiskStatus = "inprogress"
)

type RolePermission string

const (
	RolePermissionAdmin RolePermission = "admin"
	RolePermissionWrite RolePermission = "write"
	RolePermissionRead  RolePermission = "read"
)

type RoleRef struct {
	// id is randomly assigned
	Id string `json:"id"`
	// group should be a URI format that includes a scope or realm
	Group      string         `json:"group"`
	Permission RolePermission `json:"permission"`
}

// GetId returns RoleRef.Id, and is useful for accessing the field via an interface.
func (v *RoleRef) GetId() string { return v.Id }

// GetGroup returns RoleRef.Group, and is useful for accessing the field via an interface.
func (v *RoleRef) GetGroup() string { return v.Group }

// GetPermission returns RoleRef.Permission, and is useful for accessing the field via an interface.
func (v *RoleRef) GetPermission() RolePermission { return v.Permission }

// SetImageScanStateResponse is returned by SetImageScanState on success.
type SetImageScanStateResponse struct {
	UpdateImageScanState *SetImageScanStateUpdateImageScanStateUpdateImageScanStatePayload `json:"updateImageScanState"`
}

// GetUpdateImageScanState returns SetImageScanStateResponse.UpdateImageScanState, and is useful for accessing the field via an interface.
func (v *SetImageScanStateResponse) GetUpdateImageScanState() *SetImageScanStateUpdateImageScanStateUpdateImageScanStatePayload {
	return v.UpdateImageScanState
}

// SetImageScanStateUpdateImageScanStateUpdateImageScanStatePayload includes the requested fields of the GraphQL type UpdateImageScanStatePayload.
type SetImageScanStateUpdateImageScanStateUpdateImageScanStatePayload struct {
	NumUids int `json:"numUids"`
}

// GetNumUids returns SetImageScanStateUpdateImageScanStateUpdateImageScanStatePayload.NumUids, and is useful for accessing the field via an interface.
func (v *SetImageScanStateUpdateImageScanStateUpdateImageScanStatePayload) GetNumUids() int {
	return v.NumUids
}

type TeamRef struct {
	// id is randomly assigned
	Id           string            `json:"id"`
	Name         string            `json:"name"`
	Roles        []*RoleRef        `json:"roles,omitempty"`
	Organization *OrganizationRef  `json:"organization,omitempty"`
	Applications []*ApplicationRef `json:"applications,omitempty"`
	Labels       []*KeyValueRef    `json:"labels,omitempty"`
}

// GetId returns TeamRef.Id, and is useful for accessing the field via an interface.
func (v *TeamRef) GetId() string { return v.Id }

// GetName returns TeamRef.Name, and is useful for accessing the field via an interface.
func (v *TeamRef) GetName() string { return v.Name }

// GetRoles returns TeamRef.Roles, and is useful for accessing the field via an interface.
func (v *TeamRef) GetRoles() []*RoleRef { return v.Roles }

// GetOrganization returns TeamRef.Organization, and is useful for accessing the field via an interface.
func (v *TeamRef) GetOrganization() *OrganizationRef { return v.Organization }

// GetApplications returns TeamRef.Applications, and is useful for accessing the field via an interface.
func (v *TeamRef) GetApplications() []*ApplicationRef { return v.Applications }

// GetLabels returns TeamRef.Labels, and is useful for accessing the field via an interface.
func (v *TeamRef) GetLabels() []*KeyValueRef { return v.Labels }

type ToolInfoRef struct {
	// id is randomly assigned
	Id      string `json:"id"`
	Name    string `json:"name"`
	Vendor  string `json:"vendor"`
	Version string `json:"version"`
}

// GetId returns ToolInfoRef.Id, and is useful for accessing the field via an interface.
func (v *ToolInfoRef) GetId() string { return v.Id }

// GetName returns ToolInfoRef.Name, and is useful for accessing the field via an interface.
func (v *ToolInfoRef) GetName() string { return v.Name }

// GetVendor returns ToolInfoRef.Vendor, and is useful for accessing the field via an interface.
func (v *ToolInfoRef) GetVendor() string { return v.Vendor }

// GetVersion returns ToolInfoRef.Version, and is useful for accessing the field via an interface.
func (v *ToolInfoRef) GetVersion() string { return v.Version }

// ValidateRequestQueryGetImageScanState includes the requested fields of the GraphQL type ImageScanState.
// The GraphQL type's documentation follows.
//
// ImageScanState holds the status of a scan request, which indicates that a scan is
// in progress, completed, or failed.
type ValidateRequestQueryGetImageScanState struct {
	// status of the scan
	Status ImageScanStateStatus `json:"status"`
	// image points to the specific image we are scanning
	Image *ValidateRequestQueryGetImageScanStateImage `json:"image"`
}

// GetStatus returns ValidateRequestQueryGetImageScanState.Status, and is useful for accessing the field via an interface.
func (v *ValidateRequestQueryGetImageScanState) GetStatus() ImageScanStateStatus { return v.Status }

// GetImage returns ValidateRequestQueryGetImageScanState.Image, and is useful for accessing the field via an interface.
func (v *ValidateRequestQueryGetImageScanState) GetImage() *ValidateRequestQueryGetImageScanStateImage {
	return v.Image
}

// ValidateRequestQueryGetImageScanStateImage includes the requested fields of the GraphQL type Image.
// The GraphQL type's documentation follows.
//
// Image holds a specific deployable image, with a platform.  This is the underlying object
// that is scanned by security scanners.  It may also be what is deployed, but generally
// these are found indrectly through the ImageIndex, with a platform filter.
type ValidateRequestQueryGetImageScanStateImage struct {
	// id is a hash of the image's digest and ownership.
	Id string `json:"id"`
	// Indexes where this image is included
	ImageIndexes []*ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndex `json:"imageIndexes"`
}

// GetId returns ValidateRequestQueryGetImageScanStateImage.Id, and is useful for accessing the field via an interface.
func (v *ValidateRequestQueryGetImageScanStateImage) GetId() string { return v.Id }

// GetImageIndexes returns ValidateRequestQueryGetImageScanStateImage.ImageIndexes, and is useful for accessing the field via an interface.
func (v *ValidateRequestQueryGetImageScanStateImage) GetImageIndexes() []*ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndex {
	return v.ImageIndexes
}

// ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndex includes the requested fields of the GraphQL type ImageIndex.
// The GraphQL type's documentation follows.
//
// ImageIndex holds the association between an ImageName and a specific list of images,
// each of which will have a platform (hopefully) and a unique digest.
//
// ImageIndex also has a list of deployments, which indicate where this image is currently
// in use.
type ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndex struct {
	// A pointer to the images this index is known by
	ImageNames []*ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndexImageNamesImageName `json:"imageNames"`
}

// GetImageNames returns ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndex.ImageNames, and is useful for accessing the field via an interface.
func (v *ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndex) GetImageNames() []*ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndexImageNamesImageName {
	return v.ImageNames
}

// ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndexImageNamesImageName includes the requested fields of the GraphQL type ImageName.
type ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndexImageNamesImageName struct {
	// Name is the base name of the image, such as 'docker.io/library/fooimage'
	Name string `json:"name"`
}

// GetName returns ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndexImageNamesImageName.Name, and is useful for accessing the field via an interface.
func (v *ValidateRequestQueryGetImageScanStateImageImageIndexesImageIndexImageNamesImageName) GetName() string {
	return v.Name
}

// ValidateRequestQueryResponse is returned by ValidateRequestQuery on success.
type ValidateRequestQueryResponse struct {
	GetImageScanState *ValidateRequestQueryGetImageScanState `json:"getImageScanState"`
}

// GetGetImageScanState returns ValidateRequestQueryResponse.GetImageScanState, and is useful for accessing the field via an interface.
func (v *ValidateRequestQueryResponse) GetGetImageScanState() *ValidateRequestQueryGetImageScanState {
	return v.GetImageScanState
}

type VulnerabilityRef struct {
	// id is randomly assigned
	Id string `json:"id"`
	// namespace where the vulnerability comes from
	Namespace string `json:"namespace"`
	// id within that namespace
	NamespaceId string `json:"namespaceId"`
	// NVD CVE reference
	Nvdid          string                  `json:"nvdid"`
	Ratings        []VulnerabilitySeverity `json:"ratings"`
	Cwes           []*CWERef               `json:"cwes,omitempty"`
	Description    string                  `json:"description"`
	Detail         string                  `json:"detail"`
	Recommendation string                  `json:"recommendation"`
	AdvisoryURLs   []string                `json:"advisoryURLs"`
	Components     []*ImageComponentRef    `json:"components,omitempty"`
}

// GetId returns VulnerabilityRef.Id, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetId() string { return v.Id }

// GetNamespace returns VulnerabilityRef.Namespace, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetNamespace() string { return v.Namespace }

// GetNamespaceId returns VulnerabilityRef.NamespaceId, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetNamespaceId() string { return v.NamespaceId }

// GetNvdid returns VulnerabilityRef.Nvdid, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetNvdid() string { return v.Nvdid }

// GetRatings returns VulnerabilityRef.Ratings, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetRatings() []VulnerabilitySeverity { return v.Ratings }

// GetCwes returns VulnerabilityRef.Cwes, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetCwes() []*CWERef { return v.Cwes }

// GetDescription returns VulnerabilityRef.Description, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetDescription() string { return v.Description }

// GetDetail returns VulnerabilityRef.Detail, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetDetail() string { return v.Detail }

// GetRecommendation returns VulnerabilityRef.Recommendation, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetRecommendation() string { return v.Recommendation }

// GetAdvisoryURLs returns VulnerabilityRef.AdvisoryURLs, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetAdvisoryURLs() []string { return v.AdvisoryURLs }

// GetComponents returns VulnerabilityRef.Components, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetComponents() []*ImageComponentRef { return v.Components }

type VulnerabilitySeverity string

const (
	VulnerabilitySeverityCritical VulnerabilitySeverity = "critical"
	VulnerabilitySeverityHigh     VulnerabilitySeverity = "high"
	VulnerabilitySeverityMedium   VulnerabilitySeverity = "medium"
	VulnerabilitySeverityLow      VulnerabilitySeverity = "low"
	VulnerabilitySeverityInfo     VulnerabilitySeverity = "info"
	VulnerabilitySeverityNone     VulnerabilitySeverity = "none"
	VulnerabilitySeverityUnknown  VulnerabilitySeverity = "unknown"
)

// __AddDeploymentTargetInput is used internally by genqlient
type __AddDeploymentTargetInput struct {
	Input *AddDeploymentTargetInput `json:"input,omitempty"`
}

// GetInput returns __AddDeploymentTargetInput.Input, and is useful for accessing the field via an interface.
func (v *__AddDeploymentTargetInput) GetInput() *AddDeploymentTargetInput { return v.Input }

// __AddImageIndexInput is used internally by genqlient
type __AddImageIndexInput struct {
	Input *AddImageIndexInput `json:"input,omitempty"`
}

// GetInput returns __AddImageIndexInput.Input, and is useful for accessing the field via an interface.
func (v *__AddImageIndexInput) GetInput() *AddImageIndexInput { return v.Input }

// __AddImageInput is used internally by genqlient
type __AddImageInput struct {
	ImageId      string         `json:"imageId"`
	ImageIndexId string         `json:"imageIndexId"`
	Input        *AddImageInput `json:"input,omitempty"`
}

// GetImageId returns __AddImageInput.ImageId, and is useful for accessing the field via an interface.
func (v *__AddImageInput) GetImageId() string { return v.ImageId }

// GetImageIndexId returns __AddImageInput.ImageIndexId, and is useful for accessing the field via an interface.
func (v *__AddImageInput) GetImageIndexId() string { return v.ImageIndexId }

// GetInput returns __AddImageInput.Input, and is useful for accessing the field via an interface.
func (v *__AddImageInput) GetInput() *AddImageInput { return v.Input }

// __AddImageNameInput is used internally by genqlient
type __AddImageNameInput struct {
	Input *AddImageNameInput `json:"input,omitempty"`
}

// GetInput returns __AddImageNameInput.Input, and is useful for accessing the field via an interface.
func (v *__AddImageNameInput) GetInput() *AddImageNameInput { return v.Input }

// __AddImageScanStateInput is used internally by genqlient
type __AddImageScanStateInput struct {
	ImageScanStateId string                  `json:"imageScanStateId"`
	ImageId          string                  `json:"imageId"`
	Input            *AddImageScanStateInput `json:"input,omitempty"`
}

// GetImageScanStateId returns __AddImageScanStateInput.ImageScanStateId, and is useful for accessing the field via an interface.
func (v *__AddImageScanStateInput) GetImageScanStateId() string { return v.ImageScanStateId }

// GetImageId returns __AddImageScanStateInput.ImageId, and is useful for accessing the field via an interface.
func (v *__AddImageScanStateInput) GetImageId() string { return v.ImageId }

// GetInput returns __AddImageScanStateInput.Input, and is useful for accessing the field via an interface.
func (v *__AddImageScanStateInput) GetInput() *AddImageScanStateInput { return v.Input }

// __AddOrganizationInput is used internally by genqlient
type __AddOrganizationInput struct {
	Input *AddOrganizationInput `json:"input,omitempty"`
}

// GetInput returns __AddOrganizationInput.Input, and is useful for accessing the field via an interface.
func (v *__AddOrganizationInput) GetInput() *AddOrganizationInput { return v.Input }

// __AddScanInput is used internally by genqlient
type __AddScanInput struct {
	ScanResult  *AddImageScanResultInput `json:"scanResult,omitempty"`
	ScanStateId string                   `json:"scanStateId"`
	ScanState   *ImageScanStatePatch     `json:"scanState,omitempty"`
}

// GetScanResult returns __AddScanInput.ScanResult, and is useful for accessing the field via an interface.
func (v *__AddScanInput) GetScanResult() *AddImageScanResultInput { return v.ScanResult }

// GetScanStateId returns __AddScanInput.ScanStateId, and is useful for accessing the field via an interface.
func (v *__AddScanInput) GetScanStateId() string { return v.ScanStateId }

// GetScanState returns __AddScanInput.ScanState, and is useful for accessing the field via an interface.
func (v *__AddScanInput) GetScanState() *ImageScanStatePatch { return v.ScanState }

// __AddTeamInput is used internally by genqlient
type __AddTeamInput struct {
	Input *AddTeamInput `json:"input,omitempty"`
}

// GetInput returns __AddTeamInput.Input, and is useful for accessing the field via an interface.
func (v *__AddTeamInput) GetInput() *AddTeamInput { return v.Input }

// __GetImageIndexAndImagesInput is used internally by genqlient
type __GetImageIndexAndImagesInput struct {
	Id string `json:"id"`
}

// GetId returns __GetImageIndexAndImagesInput.Id, and is useful for accessing the field via an interface.
func (v *__GetImageIndexAndImagesInput) GetId() string { return v.Id }

// __GetOrganizationInput is used internally by genqlient
type __GetOrganizationInput struct {
	Id string `json:"id"`
}

// GetId returns __GetOrganizationInput.Id, and is useful for accessing the field via an interface.
func (v *__GetOrganizationInput) GetId() string { return v.Id }

// __LinkImageIndexToNameInput is used internally by genqlient
type __LinkImageIndexToNameInput struct {
	ImageNameId  string `json:"imageNameId"`
	ImageIndexId string `json:"imageIndexId"`
}

// GetImageNameId returns __LinkImageIndexToNameInput.ImageNameId, and is useful for accessing the field via an interface.
func (v *__LinkImageIndexToNameInput) GetImageNameId() string { return v.ImageNameId }

// GetImageIndexId returns __LinkImageIndexToNameInput.ImageIndexId, and is useful for accessing the field via an interface.
func (v *__LinkImageIndexToNameInput) GetImageIndexId() string { return v.ImageIndexId }

// __SetImageScanStateInput is used internally by genqlient
type __SetImageScanStateInput struct {
	ScanStateId string               `json:"scanStateId"`
	Status      ImageScanStateStatus `json:"status"`
	Now         *time.Time           `json:"now"`
}

// GetScanStateId returns __SetImageScanStateInput.ScanStateId, and is useful for accessing the field via an interface.
func (v *__SetImageScanStateInput) GetScanStateId() string { return v.ScanStateId }

// GetStatus returns __SetImageScanStateInput.Status, and is useful for accessing the field via an interface.
func (v *__SetImageScanStateInput) GetStatus() ImageScanStateStatus { return v.Status }

// GetNow returns __SetImageScanStateInput.Now, and is useful for accessing the field via an interface.
func (v *__SetImageScanStateInput) GetNow() *time.Time { return v.Now }

// __ValidateRequestQueryInput is used internally by genqlient
type __ValidateRequestQueryInput struct {
	Id string `json:"id"`
}

// GetId returns __ValidateRequestQueryInput.Id, and is useful for accessing the field via an interface.
func (v *__ValidateRequestQueryInput) GetId() string { return v.Id }

// The query or mutation executed by AddDeploymentTarget.
const AddDeploymentTarget_Operation = `
mutation AddDeploymentTarget ($input: AddDeploymentTargetInput!) {
	addDeploymentTarget(input: [$input], upsert: true) {
		numUids
		deploymentTarget {
			id
			name
		}
	}
}
`

// DeploymentTarget related queries/mutations
func AddDeploymentTarget(
	ctx context.Context,
	client graphql.Client,
	input *AddDeploymentTargetInput,
) (*AddDeploymentTargetResponse, error) {
	req := &graphql.Request{
		OpName: "AddDeploymentTarget",
		Query:  AddDeploymentTarget_Operation,
		Variables: &__AddDeploymentTargetInput{
			Input: input,
		},
	}
	var err error

	var data AddDeploymentTargetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by AddImage.
const AddImage_Operation = `
mutation AddImage ($imageId: String!, $imageIndexId: String!, $input: AddImageInput!) {
	addImage(input: [$input], upsert: true) {
		image {
			id
		}
	}
	updateImage(input: {filter:{id:{eq:$imageId}},set:{imageIndexes:[{id:$imageIndexId}]}}) {
		numUids
	}
}
`

func AddImage(
	ctx context.Context,
	client graphql.Client,
	imageId string,
	imageIndexId string,
	input *AddImageInput,
) (*AddImageResponse, error) {
	req := &graphql.Request{
		OpName: "AddImage",
		Query:  AddImage_Operation,
		Variables: &__AddImageInput{
			ImageId:      imageId,
			ImageIndexId: imageIndexId,
			Input:        input,
		},
	}
	var err error

	var data AddImageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by AddImageIndex.
const AddImageIndex_Operation = `
mutation AddImageIndex ($input: AddImageIndexInput!) {
	addImageIndex(input: [$input], upsert: true) {
		numUids
		imageIndex {
			id
		}
	}
}
`

func AddImageIndex(
	ctx context.Context,
	client graphql.Client,
	input *AddImageIndexInput,
) (*AddImageIndexResponse, error) {
	req := &graphql.Request{
		OpName: "AddImageIndex",
		Query:  AddImageIndex_Operation,
		Variables: &__AddImageIndexInput{
			Input: input,
		},
	}
	var err error

	var data AddImageIndexResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by AddImageName.
const AddImageName_Operation = `
mutation AddImageName ($input: AddImageNameInput!) {
	addImageName(input: [$input], upsert: true) {
		numUids
		imageName {
			id
		}
	}
}
`

func AddImageName(
	ctx context.Context,
	client graphql.Client,
	input *AddImageNameInput,
) (*AddImageNameResponse, error) {
	req := &graphql.Request{
		OpName: "AddImageName",
		Query:  AddImageName_Operation,
		Variables: &__AddImageNameInput{
			Input: input,
		},
	}
	var err error

	var data AddImageNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by AddImageScanState.
const AddImageScanState_Operation = `
mutation AddImageScanState ($imageScanStateId: String!, $imageId: String!, $input: AddImageScanStateInput!) {
	addImageScanState(input: [$input]) {
		imageScanState {
			id
		}
	}
	updateImageScanState(input: {filter:{id:{eq:$imageScanStateId}},set:{image:{id:$imageId}}}) {
		numUids
	}
}
`

func AddImageScanState(
	ctx context.Context,
	client graphql.Client,
	imageScanStateId string,
	imageId string,
	input *AddImageScanStateInput,
) (*AddImageScanStateResponse, error) {
	req := &graphql.Request{
		OpName: "AddImageScanState",
		Query:  AddImageScanState_Operation,
		Variables: &__AddImageScanStateInput{
			ImageScanStateId: imageScanStateId,
			ImageId:          imageId,
			Input:            input,
		},
	}
	var err error

	var data AddImageScanStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by AddOrganization.
const AddOrganization_Operation = `
mutation AddOrganization ($input: AddOrganizationInput!) {
	addOrganization(input: [$input], upsert: true) {
		numUids
		organization {
			id
			name
		}
	}
}
`

func AddOrganization(
	ctx context.Context,
	client graphql.Client,
	input *AddOrganizationInput,
) (*AddOrganizationResponse, error) {
	req := &graphql.Request{
		OpName: "AddOrganization",
		Query:  AddOrganization_Operation,
		Variables: &__AddOrganizationInput{
			Input: input,
		},
	}
	var err error

	var data AddOrganizationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by AddScan.
const AddScan_Operation = `
mutation AddScan ($scanResult: AddImageScanResultInput!, $scanStateId: String!, $scanState: ImageScanStatePatch!) {
	addImageScanResult(input: [$scanResult]) {
		imageScanResult {
			id
		}
	}
	updateImageScanState(input: {filter:{id:{eq:$scanStateId}},set:$scanState}) {
		numUids
	}
}
`

func AddScan(
	ctx context.Context,
	client graphql.Client,
	scanResult *AddImageScanResultInput,
	scanStateId string,
	scanState *ImageScanStatePatch,
) (*AddScanResponse, error) {
	req := &graphql.Request{
		OpName: "AddScan",
		Query:  AddScan_Operation,
		Variables: &__AddScanInput{
			ScanResult:  scanResult,
			ScanStateId: scanStateId,
			ScanState:   scanState,
		},
	}
	var err error

	var data AddScanResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by AddTeam.
const AddTeam_Operation = `
mutation AddTeam ($input: AddTeamInput!) {
	addTeam(input: [$input], upsert: true) {
		numUids
		team {
			id
			name
		}
	}
}
`

// Team related queries/mutations
func AddTeam(
	ctx context.Context,
	client graphql.Client,
	input *AddTeamInput,
) (*AddTeamResponse, error) {
	req := &graphql.Request{
		OpName: "AddTeam",
		Query:  AddTeam_Operation,
		Variables: &__AddTeamInput{
			Input: input,
		},
	}
	var err error

	var data AddTeamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by GetImageIndexAndImages.
const GetImageIndexAndImages_Operation = `
query GetImageIndexAndImages ($id: String!) {
	getImageIndex(id: $id) {
		images {
			digest
			platform
		}
	}
}
`

func GetImageIndexAndImages(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetImageIndexAndImagesResponse, error) {
	req := &graphql.Request{
		OpName: "GetImageIndexAndImages",
		Query:  GetImageIndexAndImages_Operation,
		Variables: &__GetImageIndexAndImagesInput{
			Id: id,
		},
	}
	var err error

	var data GetImageIndexAndImagesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by GetOrganization.
const GetOrganization_Operation = `
query GetOrganization ($id: String!) {
	getOrganization(id: $id) {
		id
		name
	}
}
`

// Organisation related queries/mutations
func GetOrganization(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetOrganizationResponse, error) {
	req := &graphql.Request{
		OpName: "GetOrganization",
		Query:  GetOrganization_Operation,
		Variables: &__GetOrganizationInput{
			Id: id,
		},
	}
	var err error

	var data GetOrganizationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by LinkImageIndexToName.
const LinkImageIndexToName_Operation = `
mutation LinkImageIndexToName ($imageNameId: String!, $imageIndexId: String!) {
	updateImageName(input: {filter:{id:{eq:$imageNameId}},set:{imageIndexes:[{id:$imageIndexId}]}}) {
		numUids
	}
}
`

func LinkImageIndexToName(
	ctx context.Context,
	client graphql.Client,
	imageNameId string,
	imageIndexId string,
) (*LinkImageIndexToNameResponse, error) {
	req := &graphql.Request{
		OpName: "LinkImageIndexToName",
		Query:  LinkImageIndexToName_Operation,
		Variables: &__LinkImageIndexToNameInput{
			ImageNameId:  imageNameId,
			ImageIndexId: imageIndexId,
		},
	}
	var err error

	var data LinkImageIndexToNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by SetImageScanState.
const SetImageScanState_Operation = `
mutation SetImageScanState ($scanStateId: String!, $status: ImageScanStateStatus!, $now: DateTime!) {
	updateImageScanState(input: {filter:{id:{eq:$scanStateId}},set:{status:$status,updatedAt:$now}}) {
		numUids
	}
}
`

func SetImageScanState(
	ctx context.Context,
	client graphql.Client,
	scanStateId string,
	status ImageScanStateStatus,
	now *time.Time,
) (*SetImageScanStateResponse, error) {
	req := &graphql.Request{
		OpName: "SetImageScanState",
		Query:  SetImageScanState_Operation,
		Variables: &__SetImageScanStateInput{
			ScanStateId: scanStateId,
			Status:      status,
			Now:         now,
		},
	}
	var err error

	var data SetImageScanStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ValidateRequestQuery.
const ValidateRequestQuery_Operation = `
query ValidateRequestQuery ($id: String!) {
	getImageScanState(id: $id) {
		status
		image {
			id
			imageIndexes {
				imageNames {
					name
				}
			}
		}
	}
}
`

func ValidateRequestQuery(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*ValidateRequestQueryResponse, error) {
	req := &graphql.Request{
		OpName: "ValidateRequestQuery",
		Query:  ValidateRequestQuery_Operation,
		Variables: &__ValidateRequestQueryInput{
			Id: id,
		},
	}
	var err error

	var data ValidateRequestQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
